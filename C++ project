/*
This is code a final project Robotic snowblower. By using an Arduino microcontroller.
A microcontroller used to control a robotic snowblower when it is running in the robotic mode. In that mode the user needs to define a length and the width of the area to work on. After that the user press a start button. The snowblower will run on predefined area on the zigzag pattern. While its running it does a u-turns of the machine and turn the chute at the same time as the snow pile needed to be on the one side of the area only.
 */

#include <Sabertooth.h>

const int buttonPin = 3; 
const int chuteCWPin =  10;
const int chuteCCWPin =  11;


Sabertooth ST(128); // The Sabertooth is on address 128. We'll name its object ST.
                    // If you've set up your Sabertooth on a different address, of course change
                    // that here. For how to configure address, etc. see the DIP Switch Wizard for
                    //   Sabertooth - http://www.dimensionengineering.com/datasheets/SabertoothDIPWizard/start.htm
                    //   SyRen      - http://www.dimensionengineering.com/datasheets/SyrenDIPWizard/start.htm
                    // Be sure to select Packetized Serial Mode for use with this library.
                    //
                    // On that note, you can use this library for SyRen just as easily.
                    // The diff-drive commands (drive, turn) do not work on a SyRen, of course, but it will respond correctly
                    // if you command motor 1 to do something (ST.motor(1, ...)), just like a Sabertooth.
                    
// this constant won't change:
const int  buttonPin1 = 5;    // the pin that the pushbutton is attached to WIDTH ON/OFF
const int  buttonPin2 = 9;    // the pin that the pushbutton is attached to LENGTH ON/OFF
const int ledPin = 12;       // the pin that the LED is attached to

// Variables will change:
int buttonPushCounter = 0;   // counter for the number of button presses
int buttonState1 = 0;         // current state of the button
int lastButtonState = 0;     // previous state of the button
int buttonState = 0; 
int buttonPushCounter1 = 0;  


int buttonPushCounter2 = 0;   // counter for the number of button presses
int buttonState2 = 0;         // current state of the button
int lastButtonState2 = 0;     // previous state of the button

void setup() {
  // initialize the button pin as a input:
  pinMode(buttonPin1, INPUT);
      // initialize the button pin as a input for length:
  pinMode(buttonPin2, INPUT);
  // initialize the LED as an output:
  pinMode(ledPin, OUTPUT);
  // initialize serial communication:
  Serial.begin(9600);

    SabertoothTXPinSerial.begin(9600); // 9600 is the default baud rate for Sabertooth packet serial.
  ST.autobaud(); // Send the autobaud command to the Sabertooth controller(s).
                 // NOTE: *Not all* Sabertooth controllers need this command.
                 //       It doesn't hurt anything, but V2 controllers use an
                 //       EEPROM setting (changeable with the function setBaudRate) to set
                 //       the baud rate instead of detecting with autobaud.
                 //
                 //       If you have a 2x12, 2x25 V2, 2x60 or SyRen 50, you can remove
                 //       the autobaud line and save yourself two seconds of startup delay.



  // initialize the chuteCW pin as an output:
  pinMode(chuteCWPin, OUTPUT);

    // initialize the chuteCCW pin as an output:
  pinMode(chuteCCWPin, OUTPUT);
}


void loop() {
  // read the pushbutton input pin: WIDTH
  buttonState1 = digitalRead(buttonPin1);

  // compare the buttonState to its previous state
  if (buttonState1 != lastButtonState) {
    // if the state has changed, increment the counter
    if (buttonState1 == LOW) {
      // if the current state is HIGH then the button
      // wend from off to on:
      buttonPushCounter++;
      Serial.println("on");
      Serial.print("number of button pushes:  ");
      Serial.println(buttonPushCounter);
      
    } else {
      // if the current state is LOW then the button
      // wend from on to off:
      Serial.println("off");
    }
    // Delay a little bit to avoid bouncing
    delay(500);
  }
  
  // save the current state as the last state,
  //for next time through the loop
  lastButtonState = buttonState1;






  // read the pushbutton input pin:  LENGTH
  buttonState2 = digitalRead(buttonPin2);

  // compare the buttonState to its previous state
  if (buttonState2 != lastButtonState2) {
    // if the state has changed, increment the counter
    if (buttonState2 == LOW) {
      // if the current state is HIGH then the button
      // wend from off to on:
      buttonPushCounter2++;
      Serial.println("on2");
      Serial.print("number of button pushes:2  ");
      Serial.println(buttonPushCounter2);
      
    } else {
      // if the current state is LOW then the button
      // wend from on to off:
      Serial.println("off 2");
    }
    // Delay a little bit to avoid bouncing
    delay(500);
  }
  
  // save the current state as the last state,
  //for next time through the loop
  lastButtonState2 = buttonState2;






// START MAIN PROGRAM


// read the pushbutton input pin:
buttonState = digitalRead(buttonPin);



if (buttonState == LOW) 
{
    // start program 

 ST.motor(1, 20); // Reverse at small power.
   
    ST.motor(2, -22); // Reverse at small power.
     delay(buttonPushCounter2 * 2000);       // Wait 2 seconds.
  ST.motor(1, 0);    // Stop.
ST.motor(2, -25.2); // turning on 180 degrees

digitalWrite(chuteCCWPin, HIGH);
  delay(6290);       // Wait 2 seconds.

  digitalWrite(chuteCCWPin, LOW);
  ST.motor(2, 0);    // Stop.
 

int s; 
 s = buttonPushCounter; 

        
// start loop
     
   for(s = 0; s < buttonPushCounter; s++)
   {
            //command to repeat "lastButtonState" times here

           //command to repeat 2 times here
               ST.motor(1, 20); // Reverse at small power.
   
    ST.motor(2, -22); // Reverse at small power.
     delay(buttonPushCounter2 * 2000);       // Wait 2 seconds.
  ST.motor(2, 0);    // Stop.
            
            ST.motor(1, 26);  // Go forward at small power.
    // turn chuteCW on:        
digitalWrite(chuteCWPin, HIGH);
      delay(6290);       // Wait 2 seconds.      
       // turn chuteCW off:     
      digitalWrite(chuteCWPin, LOW);
            ST.motor(1, 0);    // Stop.      

//go forward on 2 wheels
           ST.motor(1, 20); // Reverse at small power.
   
    ST.motor(2, -22); // Reverse at small power.
     delay(buttonPushCounter2 * 2000);       // Wait 2 seconds.
  ST.motor(1, 0);    // Stop.

            ST.motor(2, -25.2); // turning on 180 degrees


// turn chuteCW on:
digitalWrite(chuteCCWPin, HIGH);

  delay(6290);       // Wait 2 seconds.

  digitalWrite(chuteCCWPin, LOW);
  ST.motor(2, 0);    // Stop.
         

                               
   }

   //end of program
   // go backward on 2 wheels
   ST.motor(1, 20); // Reverse at small power.
 ST.motor(2, -22); // Reverse at small power.
  delay(buttonPushCounter2 * 2000);       // Wait 2 seconds.
 
  ST.motor(1, 0);    // Stop.
  ST.motor(2, 0);    // Stop.

// turn chuteCW on: on initial position
digitalWrite(chuteCWPin, HIGH);

  delay(6290);       // Wait 2 seconds.

  digitalWrite(chuteCWPin, LOW);
  
  
}
}
